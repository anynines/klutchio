apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xkeyvalueinstances.anynines.com
spec:
  group: anynines.com
  names:
    kind: XKeyvalueInstance
    plural: xkeyvalueinstances
  claimNames:
    kind: KeyvalueInstance
    plural: keyvalueinstances
  defaultCompositionRef:
    name: a9s-keyvalue
  defaultCompositeDeletePolicy: Foreground
  versions:
    - name: v1
      served: true
      referenceable: true
      schema:
        openAPIV3Schema:
          supported:
            - plans:
                &keyvaluePlans [
                  "keyvalue-replica-small-ssl",
                  "keyvalue-replica-medium-ssl",
                  "keyvalue-replica-big-ssl",
                  "keyvalue-single-nano-ssl",
                  "keyvalue-single-small-ssl",
                  "keyvalue-single-medium-ssl",
                  "keyvalue-single-big-ssl",
                ]
            - services: &keyvalueServices ["a9s-keyvalue8"]
          properties:
            spec:
              properties:
                acceptsIncomplete:
                  type: boolean
                service:
                  type: string
                  enum: *keyvalueServices
                  x-kubernetes-validations:
                    # Validation to check that service can't be updated.
                    - rule: "self == oldSelf"
                      message: "Service is an immutable field"
                plan:
                  description:
                    Plan specifies the service plan. There are options
                    for single or clustered Data Service Instances and options for
                    different underlying computing resources (e.g.
                    keyvalue-replica-small-ssl).
                  type: string
                  enum: *keyvaluePlans
                  x-kubernetes-validations:
                    # Validate that only upgrades from smaller to larger DS instance
                    # sizes are allowed.
                    - rule:
                        "!(self.contains('small') && oldSelf.contains('medium')) &&
                        !(self.contains('small') && oldSelf.contains('big')) &&
                        !(self.contains('medium') && oldSelf.contains('big'))"
                      message:
                        "Transition from bigger to smaller plan size is not
                        supported."
                    # We must use separate rules to avoid reaching the rule complexity limit
                    - rule:
                        "!(self.contains('nano') && oldSelf.contains('small')) &&
                        !(self.contains('nano') && oldSelf.contains('medium'))&&
                        !(self.contains('nano') && oldSelf.contains('big'))"
                      message:
                        "Transition from bigger to smaller plan size is not
                        supported."
                    # Validate that migrations from single to clustered DS or
                    # from clustered to single instance are not allowed.
                    - rule: "!(self.contains('-single-') && oldSelf.contains('-replica-'))"
                      message: "Migration from clustered to single Data Service
                        Instance is not supported."
                    - rule: "!(self.contains('-replica-') && oldSelf.contains('-single-'))"
                      message: "Migration from single to clustered Data Service
                        Instance is not supported."
                    - rule: "oldSelf.contains('ssl') == self.contains('ssl')"
                      message:
                        "Plan migrations not possible from Non-SSL to SSL and
                        SSL to Non-SSL"
              required:
                - service
                - plan
            status:
              type: object
              properties:
                managed:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ManagedResource
          type: string
          jsonPath: ".status.managed.state"

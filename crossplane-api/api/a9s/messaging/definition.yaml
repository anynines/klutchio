apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xmessaginginstances.anynines.com
spec:
  group: anynines.com
  names:
    kind: XMessagingInstance
    plural: xmessaginginstances
  claimNames:
    kind: MessagingInstance
    plural: messaginginstances
  defaultCompositionRef:
    name: a9s-messaging
  defaultCompositeDeletePolicy: Foreground
  versions:
    - name: v1
      served: true
      referenceable: true
      schema:
        openAPIV3Schema:
          supported:
            # TODO: Add validation to check whether a plan is valid for a given service
            - plans:
                &messagingPlans [
                  "messaging-single-nano",
                  "messaging-single-small",
                  "messaging-single-big",
                  "messaging-single-nano-ssl",
                  "messaging-single-small-ssl",
                  "messaging-single-big-ssl",
                  "messaging-cluster-small",
                  "messaging-cluster-big",
                  "messaging-cluster-small-ssl",
                  "messaging-cluster-big-ssl",
                ]
            - services:
                &messagingServices [
                  "a9s-messaging310",
                  "a9s-messaging312",
                  "a9s-messaging313",
                ]
          properties:
            spec:
              properties:
                acceptsIncomplete:
                  type: boolean
                service:
                  type: string
                  enum: *messagingServices
                  x-kubernetes-validations:
                    # Validation to check that service can't be updated.
                    - rule: "self == oldSelf"
                      message: "Service is an immutable field"
                plan:
                  description:
                    Plan specifies the service plan. There are options
                    for single or clustered Data Service Instances and options for
                    different underlying computing resources (e.g.
                    messaging-cluster-small).
                  type: string
                  enum: *messagingPlans
                  x-kubernetes-validations:
                    # Validate that only upgrades from smaller to bigger DS instance
                    # sizes are allowed.
                    - rule:
                        "!(self.contains('nano') && oldSelf.contains('small')) &&
                        !(self.contains('nano') && oldSelf.contains('big')) &&
                        !(self.contains('small') && oldSelf.contains('big'))"
                      message:
                        "Transition from bigger to smaller plan size is not
                        supported."
                    # Validate that only migrations from single to clustered DS
                    # instance are allowed.
                    - rule: "!(self.contains('-single-') && oldSelf.contains('-cluster-'))"
                      message: "Migration from clustered to single Data Service
                        Instance is not supported."
                    - rule: "oldSelf.contains('ssl') == self.contains('ssl')"
                      message:
                        "Plan migrations not possible from Non-SSL to SSL and
                        SSL to Non-SSL"

                # Custom Parameters
                parameters:
                  type: object
                  properties:
                    consumerTimeout:
                      type: integer
                      description: |
                        RabbitMQ's consumer_timeout parameter in milliseconds.
                        See https://www.rabbitmq.com/docs/consumers#acknowledgement-timeout
                      x-kubernetes-validations:
                        - rule: "self >= 1800000"
                          message: "Must be greater than or equal to 1800000"
                    tlsProtocols:
                      description: |
                        You can specify the TLS protocol version via the custom parameter tls-protocols.
                        The custom parameter tls-protocols correlates with RabbitMQ's configuration
                        parameter ssl_options.versions, see https://www.rabbitmq.com/ssl.html#tls-versions
                      type: array
                      items:
                        type: string
                        enum: ["tlsv1.2", "tlsv1.3"]
                    tlsCiphers:
                      description: |
                        You can limit the TLS ciphers via the custom parameter.
                        The custom parameter tls-ciphers correlates with RabbitMQ's configuration
                        parameter ssl_options.ciphers, see https://www.rabbitmq.com/ssl.html#configuring-cipher-suites

                        An array with cipher names is expected. Only Java format is supported.
                        WARNING: There is no validation enabled for the user provided value and
                        therefore existing instances can break when applying this parameter.
                      type: array
                      items:
                        type: string
                    roles:
                      description: |
                        You can create a new user with specific permissions (roles) giving using
                        this custom parameter. This parameter receives an array of roles.
                      type: array
                      items:
                        type: string

              required:
                - service
                - plan
            status:
              type: object
              properties:
                managed:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: ManagedResource
          type: string
          jsonPath: ".status.managed.state"
